@page
@model TurismoNeuquen.Pages.ComoLlegarModel
@{
    ViewData["Title"] = "Como Llegar a POIs";
}

<head>
    <link rel="stylesheet" href="~/css/comos.css" />
</head>

<!-- Map container and search input -->
<div class="container-fluid">
    <!-- Search input with instructions -->
    <div class="search-container">
        <input type="text" id="searchInput" placeholder="Haz clic en el mapa o busca desde donde quieres iniciar tu viaje" />
    </div>

    <!-- Map container -->
    <div id="map"></div>
</div>

<!-- Leaflet and Routing Machine -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
<script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>

<!-- Pass server-side data to JavaScript ESTO ES PARA PASAR A JS LAS VARIABLES --> 
<script>
    window.startPointLat = @Html.Raw(@Model.StartPoint.Latitude);
    window.startPointLong = @Html.Raw(@Model.StartPoint.Longitude);

    window.endPointLat = @Html.Raw(@Model.EndPoint.Latitude);
    window.endPointLong = @Html.Raw(@Model.EndPoint.Longitude);

    window.endPointName = @Html.Raw(@Model.EndPoint.Name);
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Initialize the map centered on the initial start point
        const map = L.map('map', {
            doubleClickZoom: false // Disable double-click zoom
        }).setView([@Model.StartPoint.Latitude, @Model.StartPoint.Longitude], 10);

        // Add a tile layer to the map (using OpenStreetMap tiles)
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Define the end point from the model
        const endPoint = [@Model.EndPoint.Latitude, @Model.EndPoint.Longitude];

        // Add a marker for the end point
        L.marker(endPoint).addTo(map).bindPopup("<b>@Model.EndPoint.Name</b>");

        // Create a routing control without initial waypoints
        const routingControl = L.Routing.control({
            waypoints: [],
            routeWhileDragging: true  // Allow the user to drag the route
        }).addTo(map);

        // Variable to store the starting point marker
        let startMarker;

        // Event listener for map double-clicks to set the starting point
        map.on('dblclick', function (e) {  // Use 'dblclick' instead of 'doubleClick'
            const startPoint = e.latlng; // Get the clicked location

            // Remove existing start marker if it exists
            if (startMarker) {
                map.removeLayer(startMarker);
            }

            // Add a new marker for the start point
            startMarker = L.marker(startPoint).addTo(map).bindPopup("<b>Punto de Inicio</b>").openPopup();

            // Update the routing control with the new start point and fixed end point
            routingControl.setWaypoints([
                L.latLng(startPoint.lat, startPoint.lng), // New Start point
                L.latLng(endPoint[0], endPoint[1])        // Fixed End point
            ]);
        });

        // Funcionalidad de búsqueda con Nominatim
        const searchInput = document.getElementById('searchInput');
        searchInput.addEventListener('keydown', function (event) {
            if (event.key === 'Enter') {
                const query = searchInput.value;
                if (query) {
                    // Llamada a la API de Nominatim
                    fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.length > 0) {
                                const result = data[0];
                                const startPoint = [result.lat, result.lon];

                                // Remove existing start marker if it exists
                                if (startMarker) {
                                    map.removeLayer(startMarker);
                                }

                                // Add a new marker for the search result
                                startMarker = L.marker(startPoint).addTo(map).bindPopup(`<b>Punto de Inicio: ${query}</b>`).openPopup();

                                // Update the routing control with the new start point and fixed end point
                                routingControl.setWaypoints([
                                    L.latLng(startPoint[0], startPoint[1]), // New Start point
                                    L.latLng(endPoint[0], endPoint[1])      // Fixed End point
                                ]);

                                // Center map on the search result
                                map.setView(startPoint, 12);
                            } else {
                                alert("No se encontró ninguna ubicación. Intenta otra dirección.");
                            }
                        })
                        .catch(error => {
                            console.error('Error en la búsqueda:', error);
                            alert("Ocurrió un error en la búsqueda. Intenta nuevamente.");
                        });
                }
            }
        });
    });
</script>